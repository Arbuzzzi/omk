// Миксины
@mixin hover($size-lg:1024px) {
  @include minW($size-lg) {
    &:hover { 
      @content
    }    
  }
}

@mixin listUnstyle {
  padding-left: 0;
  list-style: none;
}

@mixin mA(){
  margin-left: auto;
  margin-right: auto;
}

@mixin mrLR($mr){
  margin-left: $mr;
  margin-right: $mr;
}

@mixin pdLR($pd){
  padding-left: $pd;
  padding-right: $pd;
}


@mixin sqwerMaxSize($size) {
  width: 100%;
  height: $size;
  max-height: $size;
  max-width: $size;
}

@mixin bgImgFreeurl($url, $name) {
  background-image: url(#{$url+$name});
}

@mixin marginTop($mb, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint);
    .margin-top#{$infix}-#{$mb} {
      @include media-breakpoint-up($breakpoint) {
        margin-top: #{$mb}px !important;
      }
    }
  }
}

@mixin marginClasses($margin-size, $breakpoints: $grid-breakpoints) {
  $dir-map: (
    top: '-top',
    right: '-right',
    bottom: '-bottom',
    left: '-left',
    all: ''
  );
  @each $key, $direction in $dir-map {
    @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint);
      .margin#{$direction}#{$infix}-#{$margin-size} {
        @include media-breakpoint-up($breakpoint) {
          margin#{$direction}: #{$margin-size}px !important;
        }
      }
    }
  }
}

@mixin paddingClasses($padding-size, $breakpoints: $grid-breakpoints) {
  $dir-map: (
    top: '-top',
    right: '-right',
    bottom: '-bottom',
    left: '-left',
    all: ''
  );
  @each $key, $direction in $dir-map {
    @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint);
      .padding#{$direction}#{$infix}-#{$padding-size} {
        @include media-breakpoint-up($breakpoint) {
          padding#{$direction}: #{$padding-size}px !important;
        }
      }
    }
  }
}

@mixin marginBottom($mb) {
  .margin-bottom-#{$mb} {
    margin-bottom: #{$mb}px !important;
  }
}

@mixin marginLeft($mb) {
  .margin-left-#{$mb} {
    margin-left: #{$mb}px !important;
  }
}

@mixin marginRight($mb) {
  .margin-right-#{$mb} {
    margin-right: #{$mb}px !important;
  }
}

@mixin fontSizeClass($fz) {
  .font-size-#{$fz} {
    font-size: #{$fz}px !important;
    &>* {
      font-size: #{$fz}px !important;
    }
  }
}

@mixin fontSizeClasses($fz, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint);
    .font-size#{$infix}-#{$fz} {
      @include media-breakpoint-up($breakpoint) {
        font-size: #{$fz}px !important;
        &>* {
          font-size: #{$fz}px !important;
        }
      }
    }
  }
}

@mixin fixHeight($fix_height) {
  .fix-height-#{$fix_height} {
    max-height: #{$fix_height}px !important;
  }
}
@mixin fontInherit {
  > * {
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
    font-family: inherit;
    @content
  }
}

@mixin sqwer($size){ // квадрат 
  height: $size;
  width: $size;
}

@mixin circle($size) { // круг
  @include sqwer($size);
  border-radius: 50%;
}

@mixin maxW($size) {
  @media screen and (max-width: $size){
    @content
  }
}

@mixin minW($size) {
  @media screen and (min-width: $size){
    @content
  }
}

@mixin after($content:'') {
  &:after {
    @include pseudo($content);
    @content
  }
}

@mixin before($content:'') {
  &:before {
    @include pseudo($content);
    @content
  }
}

@mixin pseudo($content:'') {
  content: '#{$content}';
  position: absolute;
  display: block;
}

@mixin bgSection($url) {
  background-image: url($url);
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}
@mixin icon {
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}